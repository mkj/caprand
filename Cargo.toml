[package]
name = "caprand"
description = "RP2040 secure random number generator by timing capacitor pullup"
version = "0.1.0"
edition = "2021"
license = "0BSD"
repository = "https://github.com/mkj/caprand"
authors = ["Matt Johnston <matt@ucc.asn.au>"]
categories = ["embedded", "cryptography"]
keywords = ["rp2040", "rng", "getrandom"]
# avoid images
exclude = [
    "docs/*",
]

[dependencies]
cortex-m = "0.7"
embassy-rp = { version = "0.3", default-features = false, features = ["rp2040"] }
rp-pac = { version = "6", default-features = false }

getrandom = { version = "0.2", default-features = false }
rand = { version = "0.8", default-features = false }
critical-section = "1.1"
sha2 = { version = "0.10", default-features = false }
rand_chacha = { version = "0.3", default-features = false }

log = { version = "0.4", default-features = false }
defmt = { version = "0.3", optional = true }

[dev-dependencies]

# "custom" feature is required to build getrandom with no_std
getrandom = { version = "0.2", features = ["custom"]}

# deps for demos
panic-probe = { version = "0.3", features = ["print-defmt"] }
defmt-rtt = { version = "0.4" }
defmt = { version = "0.3" }
heapless = "0.8"

# demos use embassy
cortex-m-rt = "0.7"
cortex-m = { version = "0.7", features = ["critical-section-single-core"]}
embassy-rp = { version = "0.3",  features = ["time-driver"] }
embassy-usb-driver = { version = "0.1" }
embassy-executor = { version = "0.7", features = ["executor-thread", "arch-cortex-m"] }
embassy-usb = { version = "0.4.0", features = ["defmt"] }
embassy-futures = "0.1"
embassy-time = "0.4"
embedded-io-async = "0.6"

[features]
defmt = [ "dep:defmt" ]

[profile.release]
debug = 2

[package.metadata.docs.rs]
features = ["getrandom/custom"]

